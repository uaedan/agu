:

## NADEAU -- 150622
## AIM:
##  = Modified/Simplified version of 'mGRIDsearch.v3' for specific task.
##  = Idea is: 
##    + Arrival time at station (at_si) equals travel time (tt) + origin time (ot)
##    . at_si == tt_si + ot  
##    . at_si == delX/vel + ot
##    . at_si == (Xi-Xo)/vel
##    . ot == at_si - (Xi-Xo)/vel, where
##       Xo is (cLT,ClN,25km) and vel is some reasonable half-space velocity
##  = For a given grid point (source location),
##      I will use output from this routine to help identify outliers based on the 
##      fourth spread (box-plot) method of my Devore  stats book.
##  = For example execution and inputs See: /data/hrsn1/hfn6/nadeau/PACKAGES/PSERM/RM.stp1.v2.proc
##

## READ COMMAND LINE ARGUMENTS
of3="$1"
oX="$2" 
oY="$3" 
oD="$4" 
MOD_VEL="$5" 
vlpSPS="$6" 
mnOT="$7"
mxOT="$8"
Vflg="$9"

## Compute oT estimates for stations,
## given half-space velocity and grid-point and station location.
    gawk 'BEGIN{\
      ox=sprintf("%f","'"$oX"'"+0.);\
      oy=sprintf("%f","'"$oY"'"+0.);\
      od=sprintf("%f","'"$oD"'"+0.);\
      mvel=sprintf("%f","'"$MOD_VEL"'"+0.);\
      vsps=sprintf("%f","'"$vlpSPS"'"+0.);\
      mnot=sprintf("%f","'"$mnOT"'"+0.);\
      mxot=sprintf("%f","'"$mxOT"'"+0.);\
      vflg=sprintf("%s","'"$Vflg"'" );\
      printf("00A oTsec oTsmp stn.nt     Xlcl      Ylcl     Dlcl   stn.nt      ");\
      printf(" lat.      lon.   depth(km)   XC     LAG NVTdur(min)\n");\
    }{\
      if($0 !~ /00A/){\
        stn=sprintf("%s",$4);\
        sx=sprintf("%f",$1+0.);\
        sy=sprintf("%f",$2+0.);\
        sd=sprintf("%f",$3+0.);\
        s_dst=sprintf("%f",sqrt( ((sx-ox)^2) + ((sy-oy)^2) + ((sd-od)^2) ) );\
        sAT=sprintf("%f",($9+0.)/vsps );\
        sTT=sprintf("%f", s_dst/mvel+0. );\
        oT=sprintf("%f", sAT-sTT+0. );\
        oTsmp=sprintf("%d", int( (sAT-sTT)*vsps+0.5 ) );\
        if(mnot+0. <= oT+0. && oT+0. <= mxot+0.){\
          printf("%f %" "4d %-7s %s\n",oT,oTsmp,stn,$0 );\
          # If verbose flag ON print to STDERR
          if(vflg == "ON"){\
            printf("%f %" "4d %-7s %s\n",oT,oTsmp,stn,$0 ) | "sort -k 1,1n |cat -n > /dev/tty";\
          }\
        }\
      }\
    }' $of3 |egrep -v '00A ' |sort -k 1,1n 
exit


